<%@page import="internal.db.edit.SupplyTransactionDatabase"%>
<%@page import="internal.db.model.SupplyTransaction"%>
<%@page import="internal.db.query.BatchNoGenerator"%>
<%@page import="common.util.Filter"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@page import="java.text.ParseException"%>
<%@page import="java.math.BigDecimal"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%--set request encoding--%>
<%--Permission Check--%>
<%@ include file="/include/PermissionCheck.jsp"%>

<%
	//set requet encoding
	request.setCharacterEncoding("UTF-8");
	//get param from request
	//array param
	String[] supplyIdArray = request.getParameterValues("supplyId");
	String[] quantityArray = request.getParameterValues("quantity");
	String[] unitPriceArray = request.getParameterValues("unitPrice");
	String[] priceDescriptionArray = request.getParameterValues("priceDescription");
	String[] statusArray = request.getParameterValues("status");
	//single param
	//batchNo should be generated by system
	String productPrice = Filter.nullFilter(request.getParameter("productPrice"));
	String shippedFee = Filter.nullFilter(request.getParameter("shippedFee"));
	String time = Filter.nullFilter(request.getParameter("time"));
	String operator = Filter.nullFilter(request.getParameter("operator"));
	String transactionDescription = Filter.nullFilter(request.getParameter("transactionDescription"));

	//validate param requried
	//validate array param required
	int rows = supplyIdArray.length;
	if (rows <= 0) {
		out.print("Missing required parameters!");
		return;
	} else if (quantityArray.length != rows || unitPriceArray.length != rows
			|| priceDescriptionArray.length != rows || statusArray.length != rows) {
		out.print("parmas error!");
		return;
	}
	for (int i = 0; i < rows; i++) {
		if (Filter.nullFilter(supplyIdArray[i]).isEmpty() || Filter.nullFilter(quantityArray[i]).isEmpty()
				|| Filter.nullFilter(unitPriceArray[i]).isEmpty()
				|| Filter.nullFilter(statusArray[i]).isEmpty()) {
			out.print("Missing required parameters in data line " + (i + 1));
			return;
		}
	}
	//validate single param required
	if (productPrice.isEmpty() || shippedFee.isEmpty() || time.isEmpty() || operator.isEmpty()) {
		out.print("Missing required parameters!");
		return;
	}

	//validate param format
	//
	String pattern = "yyyy-MM-dd";
	SimpleDateFormat sdf = new SimpleDateFormat(pattern);
	//validate array param format
	for (int i = 0; i < rows; i++) {
		boolean isArrayFormatted = false;
		try {
			Integer.parseInt(supplyIdArray[i]);
			Integer.parseInt(quantityArray[i]);
			new BigDecimal(unitPriceArray[i]);

			isArrayFormatted = true;
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		if (!isArrayFormatted) {
			out.print("Incorrect parameter format in line " + (i + 1) + "!");
			return;
		}
	}
	//validate single param format
	boolean isSingleFormatted = false;
	try {
		new BigDecimal(productPrice);
		new BigDecimal(shippedFee);
		sdf.parse(time);

		isSingleFormatted = true;
	} catch (NumberFormatException | ParseException e) {
		e.printStackTrace();
	}
	if (!isSingleFormatted) {
		out.print("Incorrect parameter format!");
		return;
	}
	//validate duplicate supplyId
	List<String> tempList = new ArrayList<>();
	for (int i = 0; i < rows; i++) {
		if (tempList.contains(supplyIdArray[i])) {
			out.print("Duplicated supply id in line " + (i + 1));
			return;
		}
		tempList.add(supplyIdArray[i]);
	}

	//generate batch no (increase 1 from the current max batch no or throw SQLException while while querying the current max batch no from database)
	int batchNo = BatchNoGenerator.generateBatchNo();

	//insert data to database
	List<SupplyTransaction> transactions = new ArrayList<>();
	for (int i = 0; i < rows; i++) {
		SupplyTransaction transaction = new SupplyTransaction();
		transaction.setSupplyId(Integer.parseInt(supplyIdArray[i]));//array param
		transaction.setQuantity(Integer.parseInt(quantityArray[i]));//array param
		transaction.setUnitPrice(new BigDecimal(unitPriceArray[i]));//array param
		transaction.setPriceDescription(Filter.nullFilter(priceDescriptionArray[i]).isEmpty() ? null
				: Filter.nullFilter(priceDescriptionArray[i]));//array param
		transaction.setStatus(statusArray[i]);//array param
		transaction.setBatchNo(batchNo);
		transaction.setProductPrice(new BigDecimal(productPrice));
		transaction.setShippedFee(new BigDecimal(shippedFee));
		transaction.setTime(sdf.parse(time));
		transaction.setOperator(operator);
		transaction.setTransactionDescription(transactionDescription.isEmpty() ? null : transactionDescription);

		transactions.add(transaction);
	}
	int insertRows = new SupplyTransactionDatabase().insertDT(transactions);

	//response
	String title = insertRows == transactions.size() ? "Success" : "Failed";
	String titleColor = insertRows == transactions.size() ? "green" : "red";
	String detail = "batchNo.: " + batchNo + "<br> insert rows / input rows: " + insertRows + " / "
			+ transactions.size();
	response.sendRedirect("Result.jsp?title=" + title + "&titleColor=" + titleColor + "&detail=" + detail);
%>
